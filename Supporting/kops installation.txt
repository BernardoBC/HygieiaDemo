Prereq

Install AWSCLI
pip install awscli --upgrade --user

Install Kubectl
https://kubernetes.io/docs/tasks/tools/install-kubectl/

sudo apt-get update && sudo apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo touch /etc/apt/sources.list.d/kubernetes.list 
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl

Install kops
https://github.com/kubernetes/kops#installing

curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops

Create a new IAM user grant following permissions: (jenkinsKube)

AmazonEC2FullAccess
AmazonRoute53FullAccess
AmazonS3FullAccess
AmazonVPCFullAccess


Configure the AWS CLI:
aws configure

AWS Access Key ID [None]: AccessKeyValue
AWS Secret Access Key [None]: SecretAccessKeyValue
Default region name [None]: us-east-2


Create AWS S3 Bucket to for kops

bucket_name=kops-state-store-bucket-bernardo
aws s3api create-bucket \
--bucket ${bucket_name} \
--region us-east-2 \
--create-bucket-configuration LocationConstraint=us-east-2


{
    "Location": "http://kops-state-store-bucket-bernardo.s3.amazonaws.com/"
}


Enable versioning for the above S3 bucket:

aws s3api put-bucket-versioning --bucket ${bucket_name} --versioning-configuration Status=Enabled

Name for the Kubernetes cluster and set the S3 bucket URL in the following environment variables:
export KOPS_CLUSTER_NAME=bernardo.k8s.local
export KOPS_STATE_STORE=s3://${bucket_name}

(Add to ~/.profile to have them available on all terminal environments)

SSH
export AWS_ACCESS_KEY=AccessKeyValue
export AWS_SECRET_KEY=SecretAccessKeyValue
export AWS_ACCESS_KEY=AKIAJ66AWTRHPA52B6VQ
export AWS_SECRET_KEY=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



Create Kubernetes Cluster definition using kops
kops create cluster \
--node-count=2 \
--node-size=t2.micro \
--zones=us-east-2a \
--name=${KOPS_CLUSTER_NAME}


Create ssh key
ssh-keygen


Create the Kubernetes Cluster
kops update cluster --name ${KOPS_CLUSTER_NAME} --yes


ubuntu@ip-10-0-0-102:~$ kops validate cluster
Validating cluster bernardo.k8s.local

INSTANCE GROUPS
NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS
master-us-east-2a       Master  c4.large        1       1       us-east-2a
nodes                   Node    t2.micro        2       2       us-east-2a

NODE STATUS
NAME                                            ROLE    READY
ip-172-20-53-231.us-east-2.compute.internal     master  True
ip-172-20-57-227.us-east-2.compute.internal     node    True
ip-172-20-59-83.us-east-2.compute.internal      node    True

Your cluster bernardo.k8s.local is ready


kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

ubuntu@ip-10-0-0-102:~$ kops get secrets kube --type secret -oplaintext
3ImaV3zoYdFN3uAcXXoUatOrwFzcr4ou

kubectl cluster-info

ubuntu@ip-10-0-0-102:~$ kubectl cluster-info
Kubernetes master is running at https://api-bernardo-k8s-local-7f4so4-1032482629.us-east-2.elb.amazonaws.com
KubeDNS is running at https://api-bernardo-k8s-local-7f4so4-1032482629.us-east-2.elb.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
https://<kubernetes-master-hostname>/ui
https://api-bernardo-k8s-local-7f4so4-1032482629.us-east-2.elb.amazonaws.com/ui



Install KOMPOSE
curl -L https://github.com/kubernetes/kompose/releases/download/v1.1.0/kompose-linux-amd64 -o kompose
chmod +x kompose
sudo mv ./kompose /usr/local/bin/kompose

kops rolling-update cluster --name ${KOPS_CLUSTER_NAME} --yes

kops delete cluster --state=s3://kops-state-store-bucket-bernardo --yes